{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "WebAssembly Text Format",
	"patterns": [
		{ "include": "#number" },
		{ "include": "#keyword" },
		{ "include": "#string" },
		{ "include": "#id" },
		{ "include": "#linecomment" },
		{ "include": "#blockcomment" },
		{ "include": "#bracket" },
		{ "include": "#space" },
		{ "include": "#invalid" }
	],
	"repository": {
		"number": {
			"name": "constant.numeric.wat",
			"match": "[+-]?(?:0x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*(?:\\.[0-9A-Fa-f](?:_?[0-9A-Fa-f])*|\\.?)(?:[Pp][+-]?[0-9A-Fa-f](?:_?[0-9A-Fa-f])*)?|[0-9](?:_?[0-9])*(?:\\.[0-9](?:_?[0-9])*|\\.?)(?:[Ee][+-]?[0-9](?:_?[0-9])*)?|inf|nan(?::0x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*)?)"
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.$1.wat",
					"match": "(export|start|result|loop|return|br(?:_(?:if|table))?|import|call(?:_indirect)?|block|else|end|if|unreachable|nop|module|offset)(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "storage.type.$1.wat",
					"match": "(func|local(?:\\.(?:[gs]et|tee))?|global(\\.(?:[gs]et))?|memory(?:\\.(?:copy|fill|grow|init|size))?|table(?:\\.(?:copy|fill|[gs]et|grow|init|size))?|(?:data|elem)(?:\\.drop)?|item|type|load|store|i(?:32|64)\\.(?:load(?:(?:8|16)_[su])?|store(?:8|16)?)|i64\\.(?:load32_[su]|store32)|f(?:32|64)\\.(?:load|store)|param|v128\\.(?:load(?:(?:8x8|16x4|32x2)_[su]|(?:8|16|32|64)_splat|(?:32|64)_zero)?|store|(?:load|store)(?:8|16|32|64)_lane))(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "storage.modifier.$1.wat",
					"match": "(mut|declare)(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "keyword.operator.expression.$1.wat",
					"match": "((?:[if](?:32|64)|v128)\\.const|i(?:32|64)\\.(?:c[lt]z|popcnt|trunc_(?:sat_)?f(?:32|64)_[su]|extend(?:8|16)_s)|f(?:32|64)\\.(?:abs|ceil|floor|trunc|nearest|sqrt|min|max|copysign|convert_i(?:32|64)_[su])|i32\\.(?:wrap_i64|reinterpret_f32)|i64\\.(?:extend(?:_i32_[su]|32_s)|reinterpret_f64)|f32\\.(?:demote_f64|reinterpret_i32)|f64\\.(?:promote_f32|reinterpret_i64)|i8x16\\.(?:shuffle|swizzle)|i(?:8x16|16x8|[if]32x4|[if]64x2)\\.(?:splat|(?:extract|replace)_lane)|i(?:8x16|16x8)\\.(?:extract_lane_[su]|abs|all_true|(?:min|max)_[su]|avgr_u)|i8x16\\.(?:narrow_i16x8_[su]|popcnt)|i16x8\\.(?:narrow_i32x4_[su]|ext(?:(?:end|mul)_(?:low|high)|add_pairwise)_i8x16_[su]|q15mulr_sat_s)|i32x4\\.(?:abs|all_true|(?:ext(?:(?:end|mul)_(?:low|high)|add_pairwise)_i16x8|(?:min|max))_[su]|dot_i16x8_s)|i64x2\\.(?:abs|all_true|ext(?:end|mul)_(?:low|high)_i32x4_[su])|f(?:32|64)\\.(?:abs|sqrt|ceil|floor|trunc|nearest|p?(?:min|max))|i32x4\\.trunc_sat_f(?:32x4_[su]|64x2_[su]_zero)|f32x4\\.(?:convert_i32x4_[su]|demote_f64x2_zero)|f64x2\\.(?:convert_low_i32x4_[su]|promote_low_f32x4)|ref\\.(?:null|is_null|func)|drop|select)(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "keyword.operator.arithmetic.$1.wat",
					"match": "(i(?:32|64)\\.(?:add|sub|mul|(?:div|rem)_[su])|f(?:32(?:x4)?|64(?:x2)?)\\.(?:add|sub|mul|div|neg)|i(?:8x16|16x8)\\.(?:neg|(?:add|sub)(_sat_[su])?)|i16x8\\.mul|i(?:32x4|64x2)\\.(?:neg|add|sub|mul))(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "keyword.operator.bitwise.$1.wat",
					"match": "(i(?:32|64)\\.(?:and|x?or|sh(?:l|r_[su])|rot[lr])|v128\\.(?:and(?:not)?|not|x?or|bitselect|any_true)|i(?:8x16|16x8|32x4|64x2)\\.(?:bitmask|shl|shr_[su]))(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "keyword.operator.relational.$1.wat",
					"match": "((?:i(?:32|64)|i8x16|i16x8|i32x4)\\.(?:[lg][te]_[su])|f(?:32(?:x4)?|64(?:x2)?)\\.(?:[lg][te])|i64x2\\.[lg][te]_s)(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "keyword.operator.comparison.$1.wat",
					"match": "(i(?:32|64)\\.(?:eqz?|ne)|(?:f(?:32|64)|i8x16|i16x8|i32x4|i64x2|f32x4|f64x2)\\.(?:eq|ne))(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "entity.other.attribute-name.$1-equals.wat",
					"match": "(align|offset)="
				},
				{
					"name": "support.type.primitive.$1.wat",
					"match": "([if](?:32|64)|v128|[if]32x4|[if]64x2|i16x8|i8x16|extern(?:ref)?|funcref)(?![0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~])"
				},
				{
					"name": "invalid.wat",
					"match": "[a-z][0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~]*"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.wat",
			"match": "(\")(?:[^\\0-\\x19\\x7F\"\\\\]|(\\\\(?:[tnr\"'\\\\]|u{[0-9A-Fa-f](?:_?[0-9A-Fa-f])*}|[0-9A-Fa-f][0-9A-Fa-f]))|(\\\\u{?[0-9A-Fa-f_]*}?)|(\\\\.))*(\")?",
			"captures": {
				"1": { "name": "punctuation.definition.string.begin.wat" },
				"2": { "name": "constant.character.escape.wat" },
				"3": { "name": "invalid.wat" },
				"4": { "name": "invalid.wat" },
				"5": { "name": "punctuation.definition.string.end.wat" }
			}
		},
		"id": {
			"name": "variable.other.wat",
			"match": "\\$[0-9A-Za-z!#$%&'*+\\-./:<=>?@\\\\^_`|~]+"
		},
		"linecomment": {
			"name": "comment.line.double-semicolon.wat",
			"match": ";;[^\\x0A\\x0D]*(?:[ \\x09\\x0A\\x0D]|\\x0D\\x0A|$)"
		},
		"blockcomment": {
			"name": "comment.block.wat",
			"begin": "\\(;",
			"patterns": [ { "include": "#blockcomment" } ],
			"end": ";\\)"
		},
		"bracket": {
			"name": "meta.brace.round.wat",
			"match": "[()]"
		},
		"space": {
			"match": "[ \\n\\r\\t]+"
		},
		"invalid": {
			"name": "invalid.wat",
			"match": "."
		}
	},
	"scopeName": "source.wat"
}
